{"name":"LAN Echo","tagline":"Basic LAN system coded in C#. ","body":"### Welcome LAN Echo Project\r\nHi, this is very simple C# based LAN Echo Server/Client system. This is an introductory level project to socket programming.\r\n\r\n```\r\n$ cd debai/LANEcho\r\n$ git fetch origin\r\n$ git checkout gh-pages\r\n```\r\n\r\nIf you're using the GitHub for Mac, simply sync your repository and you'll see the new branch.\r\n\r\n### The Idea\r\n<p>Socket programming can be done in almost any programming language, I&#8217;ve chosen C#. Here we&#8217;ll be creating a echo server.</p>\r\n<p>This project consists of 2 main parts:<br />\r\n1. Server<br />\r\n2. Client</p>\r\n<p>Our server is a TCP Server. It is basically as instance of <strong>TcpListener</strong> class from from <strong>System.Net.Sockets</strong> namespace. We initialize the server with two arguments: an IP and a port. IP is of type <strong>IPAddress </strong>from <strong>System.Net</strong> namespace and port is of integer type. As shown below:</p>\r\n<pre>public class Server\r\n{\r\n    private TcpListener _tcpListener;\r\n    private IPAddress _IP;\r\n    private int _port = 5050;\r\n\r\n    public Server()\r\n    {\r\n       _tcpListener = new TcpListener(IPAddress.Loopback, _port);\r\n    }\r\n\r\n    public Server(string IP, int port)\r\n    {\r\n        if (!IPAddress.TryParse(IP, out _IP)) \r\n           _IP = IPAddress.Loopback; // 127.0.0.1\r\n        _port = port;\r\n        _tcpListener = new TcpListener(_IP, _port);\r\n    }\r\n}</pre>\r\n<p>The server basically has 4 function to do:</p>\r\n<ol>\r\n<li>Accept an incoming connection (i.e. incoming socket).</li>\r\n<li>Receive data from the socket as byte array</li>\r\n<li>Process the data (in this case print it)</li>\r\n<li>Send response (in this case, echo the same data back)</li>\r\n</ol>\r\n<p>We start the server by calling the <strong>Start</strong> method on the server then the server listens (or waits) for an incoming client for ever, we achieve it by using an infinite loop. Inside the loop we create an instance of <strong>TcpClient</strong> from <strong>System.Net.Sockets</strong> namespace. This object will hold our incoming client. The server accepts the incoming client by calling <strong>AcceptTcpClient</strong> function on the <strong>TcpListener</strong> instance as follows:</p>\r\n<pre>private void Service()\r\n{\r\n    _tcpListener.Start();\r\n    while (true)\r\n    {\r\n       TcpClient client = _tcpListener.AcceptTcpClient();\r\n       Thread clientThread = \r\n       new Thread(new ParameterizedThreadStart(ClientHandler));\r\n       clientThread.Start(client);\r\n    }\r\n }</pre>\r\n<p>We&#8217;ve used multi-threading because we don&#8217;t want to block the main thread with the first client, because if we do so, then our server can&#8217;t service to other clients, and they will be force to wait in a queue.</p>\r\n<p><strong>ClientHandler</strong> method handles each incoming client in a new thread. Here we get the network stream from the client and read the payload data from it using the <strong>Read</strong> method and load it in a buffer. The data from the buffer is then ASCII encoded to text and printed out to the screen.</p>\r\n<pre>NetworkStream clientStream = tcpClient.GetStream();\r\nbyte[] msg = new byte[SIZE];\r\nbyteCount = clientStream.Read(msg, 0, SIZE);\r\nASCIIEncoding encoder = new ASCIIEncoding();\r\nstring text = encoder.GetString(msg, 0, byteCount);\r\nWriteMessage(text);</pre>\r\n<p>Since we&#8217;re developing an echo server so we need to echo the same data back to the client. We do it by writing the same sequence of byte back to the client using the Write method on the client&#8217;s network stream</p>\r\n<pre>clientStream.Write(msg, 0, byteCount);\r\nclientStream.Flush();</pre>\r\n<p>That&#8217;s all! the server is all set up. Now it&#8217;s time to code the client. The client is almost similar to the server. the client is basically an instance of <strong>TcpClient</strong> which connects with the server through the <strong>Connect</strong> method. this method acceps the server information using a <strong>IPEndPont</strong> object containing the information of the server&#8217;s IP and port no. as shown:</p>\r\n<pre>public class Client\r\n{\r\n   private TcpClient tcpClient;\r\n   private IPAddress _IP;\r\n   private IPEndPoint _ServerEndpoint;\r\n   private int _port = 5050;\r\n\r\n   public Client()\r\n   {\r\n      tcpClient = new TcpClient();\r\n      _IP = IPAddress.Loopback;\r\n      _ServerEndpoint = new IPEndPoint(_IP, _port);\r\n   }\r\n\r\n   public Client(string IP, int port)\r\n   {\r\n      if (!IPAddress.TryParse(IP, out _IP)) \r\n         _IP = IPAddress.Loopback;\r\n      _port = port;\r\n      tcpClient = new TcpClient();\r\n      _ServerEndpoint = new IPEndPoint(_IP, _port);\r\n   }</pre>\r\n<br />\r\n<pre>tcpClient.Connect(_ServerEndpoint);</pre>\r\n<p>The client sends a sequence of byte to the server by writing to it&#8217;s network stream using the <strong>Write</strong> method as shown:</p>\r\n<pre>ASCIIEncoding encoder = new ASCIIEncoding();\r\nbyte[] buffer = new byte[4096];\r\nNetworkStream clientStream = tcpClient.GetStream();\r\nvar text = Console.ReadLine();\r\nbuffer = encoder.GetBytes(text);\r\nclientStream.Write(buffer, 0, buffer.Length);\r\nclientStream.Flush();</pre>\r\n<p>When sending data is complete it waits for the server to respond and collects the response in another byte array and finally prints it out to the console.</p>\r\n<pre>byte[] response = new byte[4096];\r\nASCIIEncoding encoder = new ASCIIEncoding();\r\nint responseLength = \r\nclientStream.Read(response, 0, response.Length);\r\nencoder.GetString(response, 0, responseLength);\r\nConsole.WriteLine(text);</pre>\r\n<p>That&#8217;s it folks! Our Echo Server/Client project is complete and ready to run!</p>\r\n\r\n### Authors and Contributors\r\nAbhisek De (@abhisekde)\r\n\r\n### Support or Contact\r\nPlease e-mail at abhisek.de@live.com\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}